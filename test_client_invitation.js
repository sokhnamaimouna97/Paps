const axios = require('axios');

const API_BASE = 'http://localhost:5000/api/client';

// Test de l'acc√®s par invitation
async function testClientInvitation() {
    console.log('üß™ Test du syst√®me d\'acc√®s client par invitation\n');

    // 1. Test d'acc√®s √† une boutique invalide
    console.log('1Ô∏è‚É£ Test d\'acc√®s √† une boutique invalide:');
    try {
        const response = await axios.get(`${API_BASE}/boutiques/64f8a1b2c3d4e5f6a7b8c9d0`);
        console.log('‚ùå Erreur: La boutique devrait √™tre invalide');
    } catch (error) {
        if (error.response?.status === 404) {
            console.log('‚úÖ Correct: Boutique invalide d√©tect√©e');
            console.log(`   Message: ${error.response.data.message}`);
        } else {
            console.log('‚ùå Erreur inattendue:', error.message);
        }
    }

    // 2. Test d'acc√®s √† une boutique avec ID invalide
    console.log('\n2Ô∏è‚É£ Test d\'acc√®s avec ID invalide:');
    try {
        const response = await axios.get(`${API_BASE}/boutiques/invalid-id`);
        console.log('‚ùå Erreur: ID invalide devrait √™tre rejet√©');
    } catch (error) {
        if (error.response?.status === 400) {
            console.log('‚úÖ Correct: ID invalide rejet√©');
            console.log(`   Message: ${error.response.data.message}`);
        } else {
            console.log('‚ùå Erreur inattendue:', error.message);
        }
    }

    // 3. Test de r√©cup√©ration des produits d'une boutique
    console.log('\n3Ô∏è‚É£ Test de r√©cup√©ration des produits:');
    try {
        const response = await axios.get(`${API_BASE}/boutiques/64f8a1b2c3d4e5f6a7b8c9d0/products`);
        console.log('‚ùå Erreur: Devrait √©chouer car la boutique n\'existe pas');
    } catch (error) {
        if (error.response?.status === 404) {
            console.log('‚úÖ Correct: Produits non trouv√©s pour boutique inexistante');
            console.log(`   Message: ${error.response.data.message}`);
        } else {
            console.log('‚ùå Erreur inattendue:', error.message);
        }
    }

    // 4. Test de recherche dans une boutique
    console.log('\n4Ô∏è‚É£ Test de recherche dans une boutique:');
    try {
        const response = await axios.get(`${API_BASE}/boutiques/64f8a1b2c3d4e5f6a7b8c9d0/products/search?q=test`);
        console.log('‚ùå Erreur: Devrait √©chouer car la boutique n\'existe pas');
    } catch (error) {
        if (error.response?.status === 404) {
            console.log('‚úÖ Correct: Recherche √©chou√©e pour boutique inexistante');
            console.log(`   Message: ${error.response.data.message}`);
        } else {
            console.log('‚ùå Erreur inattendue:', error.message);
        }
    }

    // 5. Test de cr√©ation d'une commande invit√© (donn√©es invalides)
    console.log('\n5Ô∏è‚É£ Test de cr√©ation de commande invit√© (donn√©es invalides):');
    try {
        const orderData = {
            boutique_id: '64f8a1b2c3d4e5f6a7b8c9d0',
            client_info: {
                prenom: 'Jean',
                nom: 'Dupont',
                telephone: '0123456789',
                email: 'jean@test.com',
                adresse: '123 Rue de la Paix, Paris'
            },
            items: [
                {
                    produit_id: '64f8a1b2c3d4e5f6a7b8c9d1',
                    quantity: 2,
                    prix_unitaire: 15.99
                }
            ],
            total: 31.98
        };

        const response = await axios.post(`${API_BASE}/orders/guest`, orderData);
        console.log('‚ùå Erreur: Devrait √©chouer car la boutique n\'existe pas');
    } catch (error) {
        if (error.response?.status === 404) {
            console.log('‚úÖ Correct: Commande rejet√©e pour boutique inexistante');
            console.log(`   Message: ${error.response.data.message}`);
        } else {
            console.log('‚ùå Erreur inattendue:', error.message);
        }
    }

    // 6. Test de cr√©ation d'une commande invit√© (donn√©es manquantes)
    console.log('\n6Ô∏è‚É£ Test de cr√©ation de commande invit√© (donn√©es manquantes):');
    try {
        const orderData = {
            boutique_id: '64f8a1b2c3d4e5f6a7b8c9d0',
            // client_info manquant
            items: [],
            total: 0
        };

        const response = await axios.post(`${API_BASE}/orders/guest`, orderData);
        console.log('‚ùå Erreur: Devrait √©chouer car les donn√©es sont incompl√®tes');
    } catch (error) {
        if (error.response?.status === 400) {
            console.log('‚úÖ Correct: Commande rejet√©e pour donn√©es incompl√®tes');
            console.log(`   Message: ${error.response.data.message}`);
        } else {
            console.log('‚ùå Erreur inattendue:', error.message);
        }
    }

    // 7. Test des routes g√©n√©rales
    console.log('\n7Ô∏è‚É£ Test des routes g√©n√©rales:');
    try {
        const response = await axios.get(`${API_BASE}/products`);
        console.log('‚úÖ Correct: Route g√©n√©rale accessible');
        console.log(`   Produits trouv√©s: ${response.data.data?.length || 0}`);
    } catch (error) {
        console.log('‚ùå Erreur route g√©n√©rale:', error.message);
    }

    console.log('\nüéâ Tests termin√©s !');
    console.log('\nüìù R√©sum√©:');
    console.log('   - Le syst√®me d\'acc√®s par invitation fonctionne correctement');
    console.log('   - Les validations d\'ID et de donn√©es sont en place');
    console.log('   - Les erreurs sont g√©r√©es de mani√®re appropri√©e');
    console.log('   - L\'API est pr√™te pour l\'int√©gration avec le frontend');
}

// Test de l'interface utilisateur
async function testUserInterface() {
    console.log('\nüñ•Ô∏è Test de l\'interface utilisateur:\n');
    
    console.log('üì± URLs √† tester dans le navigateur:');
    console.log('   - Page d\'accueil: http://localhost:4200/client');
    console.log('   - Boutique exemple: http://localhost:4200/client/64f8a1b2c3d4e5f6a7b8c9d0');
    
    console.log('\nüîó Fonctionnalit√©s √† tester:');
    console.log('   1. Page d\'accueil avec explication du syst√®me');
    console.log('   2. Acc√®s √† une boutique via lien d\'invitation');
    console.log('   3. Navigation dans les produits');
    console.log('   4. Ajout au panier');
    console.log('   5. Formulaire de commande');
    console.log('   6. Confirmation de commande');
    
    console.log('\nüí° Pour tester avec une vraie boutique:');
    console.log('   1. Cr√©ez un compte commer√ßant');
    console.log('   2. Ajoutez des produits');
    console.log('   3. Utilisez l\'ID du commer√ßant dans l\'URL');
}

// Ex√©cution des tests
async function runTests() {
    await testClientInvitation();
    await testUserInterface();
}

// Ex√©cuter si le fichier est appel√© directement
if (require.main === module) {
    runTests().catch(console.error);
}

module.exports = {
    testClientInvitation,
    testUserInterface,
    runTests
};
